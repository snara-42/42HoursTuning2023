events {
    use epoll; # 高性能なイベントモデルを利用
    multi_accept on; # 一度に複数の新しい接続を受け入れる
}

server {
  # sendfile on; # 高速なファイル転送を有効にする
  # tcp_nopush on; # TCPのNagleアルゴリズムを無効化し、レスポンス速度を向上させる
  # tcp_nodelay on; # データ送信の遅延を防ぐ
  listen 80;

  location / {
    proxy_pass http://frontend:3000;
  }
  location /api/ {
    proxy_pass http://backend:8000;
  }
}

# worker_processes auto; # CPUコア数に応じてworkerプロセスの数を自動設定
# worker_connections 1024; # 各workerプロセスが同時に処理できる接続数

# events {
#     use epoll; # 高性能なイベントモデルを利用
#     multi_accept on; # 一度に複数の新しい接続を受け入れる
# }

# http {
#     # sendfile on; # 高速なファイル転送を有効にする
#     # tcp_nopush on; # TCPのNagleアルゴリズムを無効化し、レスポンス速度を向上させる
#     # tcp_nodelay on; # データ送信の遅延を防ぐ

#     server {
#         listen 80;

#         location / {
#             proxy_pass http://frontend:3000;
#             proxy_buffering off; # レスポンスをバッファリングせずにクライアントに直接送信
#         }
#         location /api/ {
#             proxy_pass http://backend:8000;
#             proxy_buffering off; # レスポンスをバッファリングせずにクライアントに直接送信
#         }
#     }
# }
